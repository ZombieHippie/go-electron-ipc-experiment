// Code generated by protoc-gen-go.
// source: math-operation.proto
// DO NOT EDIT!

package tutorial

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MathOperation_OperationType int32

const (
	MathOperation_MULTIPLY MathOperation_OperationType = 0
	MathOperation_DIVIDE   MathOperation_OperationType = 1
	MathOperation_ADD      MathOperation_OperationType = 2
	MathOperation_SUBTRACT MathOperation_OperationType = 3
)

var MathOperation_OperationType_name = map[int32]string{
	0: "MULTIPLY",
	1: "DIVIDE",
	2: "ADD",
	3: "SUBTRACT",
}
var MathOperation_OperationType_value = map[string]int32{
	"MULTIPLY": 0,
	"DIVIDE":   1,
	"ADD":      2,
	"SUBTRACT": 3,
}

func (x MathOperation_OperationType) String() string {
	return proto.EnumName(MathOperation_OperationType_name, int32(x))
}
func (MathOperation_OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 0}
}

type MathOperation struct {
	Id            string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	LeftHandSide  float32                     `protobuf:"fixed32,2,opt,name=left_hand_side,json=leftHandSide" json:"left_hand_side,omitempty"`
	RightHandSide float32                     `protobuf:"fixed32,3,opt,name=right_hand_side,json=rightHandSide" json:"right_hand_side,omitempty"`
	Operation     MathOperation_OperationType `protobuf:"varint,4,opt,name=operation,enum=tutorial.MathOperation_OperationType" json:"operation,omitempty"`
}

func (m *MathOperation) Reset()                    { *m = MathOperation{} }
func (m *MathOperation) String() string            { return proto.CompactTextString(m) }
func (*MathOperation) ProtoMessage()               {}
func (*MathOperation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type MathResult struct {
	Id     string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Result float32 `protobuf:"fixed32,2,opt,name=result" json:"result,omitempty"`
	Error  string  `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *MathResult) Reset()                    { *m = MathResult{} }
func (m *MathResult) String() string            { return proto.CompactTextString(m) }
func (*MathResult) ProtoMessage()               {}
func (*MathResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*MathOperation)(nil), "tutorial.MathOperation")
	proto.RegisterType((*MathResult)(nil), "tutorial.MathResult")
	proto.RegisterEnum("tutorial.MathOperation_OperationType", MathOperation_OperationType_name, MathOperation_OperationType_value)
}

var fileDescriptor1 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4d, 0x2c, 0xc9,
	0xd0, 0xcd, 0x2f, 0x48, 0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x28, 0x29, 0x2d, 0xc9, 0x2f, 0xca, 0x4c, 0xcc, 0x51, 0xfa, 0xc2, 0xc8, 0xc5, 0xeb,
	0x0b, 0x54, 0xe2, 0x0f, 0x53, 0x21, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8,
	0xc1, 0x19, 0x04, 0x64, 0x09, 0xa9, 0x70, 0xf1, 0xe5, 0xa4, 0xa6, 0x95, 0xc4, 0x67, 0x24, 0xe6,
	0xa5, 0xc4, 0x17, 0x67, 0xa6, 0xa4, 0x4a, 0x30, 0x01, 0xe5, 0x98, 0x82, 0x78, 0x40, 0xa2, 0x1e,
	0x40, 0xc1, 0x60, 0xa0, 0x98, 0x90, 0x1a, 0x17, 0x7f, 0x51, 0x66, 0x7a, 0x06, 0xb2, 0x32, 0x66,
	0xb0, 0x32, 0x5e, 0xb0, 0x30, 0x5c, 0x9d, 0x33, 0x17, 0x27, 0xdc, 0x31, 0x12, 0x2c, 0x40, 0x15,
	0x7c, 0x46, 0xaa, 0x7a, 0x30, 0xd7, 0xe8, 0xa1, 0xb8, 0x44, 0x0f, 0xce, 0x0a, 0xa9, 0x2c, 0x48,
	0x0d, 0x42, 0xe8, 0x53, 0x72, 0xe0, 0xe2, 0x45, 0x91, 0x13, 0xe2, 0xe1, 0xe2, 0xf0, 0x0d, 0xf5,
	0x09, 0xf1, 0x0c, 0xf0, 0x89, 0x14, 0x60, 0x10, 0xe2, 0xe2, 0x62, 0x73, 0xf1, 0x0c, 0xf3, 0x74,
	0x71, 0x15, 0x60, 0x14, 0x62, 0xe7, 0x62, 0x76, 0x74, 0x71, 0x11, 0x60, 0x02, 0x29, 0x09, 0x0e,
	0x75, 0x0a, 0x09, 0x72, 0x74, 0x0e, 0x11, 0x60, 0x56, 0xf2, 0xe2, 0xe2, 0x02, 0xd9, 0x15, 0x94,
	0x5a, 0x5c, 0x9a, 0x53, 0x82, 0xe1, 0x65, 0x31, 0x2e, 0xb6, 0x22, 0xb0, 0x0c, 0xd4, 0xab, 0x50,
	0x9e, 0x90, 0x08, 0x17, 0x6b, 0x6a, 0x51, 0x51, 0x7e, 0x11, 0xd8, 0x6b, 0x9c, 0x41, 0x10, 0x4e,
	0x12, 0x1b, 0x38, 0x4c, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x78, 0x2e, 0xcc, 0xbe, 0x6b,
	0x01, 0x00, 0x00,
}
